name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ghcr.io/${{ github.repository }}
  DB_CONNECTION_STRING: "Server=localhost,1433;Database=MicroSaasDB;User Id=sa;Password=YourStrong!Passw0rd;TrustServerCertificate=True;"

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      sqlserver:
        image: mcr.microsoft.com/mssql/server:2019-latest
        env:
          ACCEPT_EULA: "Y"
          SA_PASSWORD: "YourStrong!Passw0rd"
        ports:
          - 1433:1433
        options: >-
          --health-cmd "/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P 'YourStrong!Passw0rd' -Q 'SELECT 1'" 
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10

    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Aguardar o SQL Server subir
        run: |
          echo "Aguardando o SQL Server..."
          for i in {1..30}; do
            /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P 'YourStrong!Passw0rd' -Q "SELECT 1" && break
            echo "SQL Server ainda não está pronto, aguardando..."
            sleep 5
          done

      - name: Configurar .NET SDKs (.NET 8 e .NET 9 Preview)
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: |
            8.0.x
            9.0.x
          include-prerelease: true

      - name: Restaurar pacotes NuGet
        run: dotnet restore poc.micro-saas.netcore8.sln

      - name: Compilar solução
        run: dotnet build poc.micro-saas.netcore8.sln --configuration Release --no-restore

      - name: Aplicar Migrations no Banco de Dados
        env:
          ConnectionStrings__DefaultConnection: ${{ env.DB_CONNECTION_STRING }}
        run: dotnet ef database update --configuration Release --context SeuDbContext

      - name: Rodar testes unitários
        run: dotnet test poc.micro-saas.netcore8.sln --configuration Release --no-build --verbosity normal

  docker-build-push:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'

    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Login no GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Construir e enviar imagens Docker
        run: |
          for service in api.gateway api.person api.customer api.clinic api.freelancer api.hr api.inventorycontrol api.external.auth api.external.email api.external.mkt; do
            docker build -t $IMAGE_PREFIX/$service:latest -f "src/01 - API/$service/Dockerfile" .
            docker push $IMAGE_PREFIX/$service:latest
          done

  deploy:
    runs-on: ubuntu-latest
    needs: docker-build-push
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Conectar ao servidor
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            cd /caminho/do/projeto
            git pull origin main
            docker login ghcr.io -u ${{ github.actor }} --password ${{ secrets.GITHUB_TOKEN }}
            docker-compose down
            docker-compose pull
            docker-compose up -d --build
